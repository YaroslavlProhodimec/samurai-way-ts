{"version":3,"file":"static/js/925.7f340ee6.chunk.js","mappings":"oTAmBaA,EAAgB,WAE1B,IAAMC,GAAWC,EAAAA,EAAAA,MAWhB,OAVAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,GAASG,EAAAA,EAAAA,OACF,WACHH,GAASI,EAAAA,EAAAA,YAOV,4BACH,SAACC,EAAD,KACA,SAACC,EAAD,QAGKD,EAAoB,WAC7B,IAAME,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAuBA,EAAMC,KAAKH,YACzDI,GAASH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAuBA,EAAMC,KAAKC,UACvDC,GAAoBC,EAAAA,EAAAA,QAAuB,MACrD,GAAmDC,EAAAA,EAAAA,WAAS,GAA5D,eAAOC,EAAP,KAA0BC,EAA1B,KAEIC,QAAQC,IAAIP,EAAO,WACnBT,EAAAA,EAAAA,YAAU,WACkB,IAAD,EAApBa,IACC,UAAAH,EAAkBO,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE3D,CAACd,IAUH,OAAO,iBAAKe,MAAO,CAACC,OAAO,QAAQC,UAAU,QAASC,SATpC,SAACC,GACjB,MAA8CA,EAAEC,cAAzCC,EAAP,EAAOA,aAAaC,EAApB,EAAoBA,UAAUC,EAA9B,EAA8BA,aAC3BC,KAAKC,IAAKJ,EAAeC,EAAaC,GAAiB,KACrDf,GAAsBC,GAAsB,GAE7CD,GAAsBC,GAAsB,IAI3C,UACFT,EAAS0B,KAAI,SAACC,GAAD,OAAM,SAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,QAClC,gBAAKC,IAAK1B,QAIPuB,EAA8CI,EAAAA,MAAW,YAAgB,IAAdH,EAAa,EAAbA,QAGpE,OAAO,4BACH,gBAAKI,IAAKJ,EAAQK,MAAOC,IAAK,UAD3B,KACuC,uBAAIN,EAAQO,YACtD,kBACCP,EAAQA,SACT,wBAIK9B,EAA8B,WACvC,OAA6BQ,EAAAA,EAAAA,UAAS,IAAtC,eAAOsB,EAAP,KAAeQ,EAAf,KACEjC,GAASH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKC,UACpDX,GAAWC,EAAAA,EAAAA,MAWjB,OAAO,yBACS,UAAXU,GAAqB,0EACxB,iCACE,0BACA,qBAAUkC,MAAOT,EAASU,SAAU,SAACpB,GAAD,OAAMkB,EAAWlB,EAAEC,cAAckB,QAAQE,KAAK,QAClF,0BACA,mBAAQC,SAAqB,UAAXrC,EAAqBsC,QAdvB,WACZb,IAGNpC,GAASkD,EAAAA,EAAAA,IAAiBd,IACxBQ,EAAW,MASX,0BAIR,UAvF4B,WACxB,OACI,0BACR,SAAC7C,EAAD","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    ChatMessageType,\r\n    sendMessageThunk,\r\n    startMessagesListening,\r\n    stopMessagesListening\r\n} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\n\r\n  const ChatPage:React.FC = () => {\r\n    return (\r\n        <div>\r\n<Chat/>\r\n        </div>\r\n    );\r\n};\r\nexport const Chat:React.FC = () => {\r\n\r\n   const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n\r\n        }\r\n    })\r\n\r\n\r\n\r\n    return <div>\r\n        <Messages />\r\n        <AddMessageFormChat />\r\n    </div>\r\n}\r\nexport const Messages:React.FC = () => {\r\n    const messages = useSelector((state:AppStateType) =>state.chat.messages)\r\n    const status = useSelector((state:AppStateType) =>state.chat.status)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\nconst [autoScrollIsActive,setAutoScrollIsActive] = useState(true)\r\n\r\n    console.log(status,'status')\r\n    useEffect(() => {\r\n        if(autoScrollIsActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    },[messages])\r\nconst scrollHandler = (e:React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n      const {scrollHeight,scrollTop,clientHeight} = e.currentTarget\r\n      if(Math.abs((scrollHeight - scrollTop) - clientHeight ) < 300 ) {\r\n          !autoScrollIsActive && setAutoScrollIsActive(true)\r\n      } else {\r\n          autoScrollIsActive && setAutoScrollIsActive(false)\r\n      }\r\n}\r\n\r\n    return <div style={{height:'400px',overflowY:'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m)=> <Message key={m.id} message={m}/>)}\r\n          <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\nexport const Message:React.FC<{message:ChatMessageType}> = React.memo(({message}) => {\r\n\r\n\r\n    return <div>\r\n        <img src={message.photo} alt={'photo'} /> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\nexport const AddMessageFormChat:React.FC = () => {\r\n    const [message,setMessage] = useState('')\r\nconst status = useSelector((state:AppStateType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const sendMessage = () => {\r\n        if(!message) {\r\n            return\r\n        }\r\n      dispatch(sendMessageThunk(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        {status === 'error' ? <div>Some Error occured. Please refresh the page</div> :\r\n      <>\r\n        <div>\r\n        <textarea value={message} onChange={(e) =>setMessage(e.currentTarget.value)} name=\"\" ></textarea></div>\r\n        <div>\r\n        <button disabled={status !== 'ready'}  onClick={sendMessage}>Send</button></div></>\r\n}\r\n    </div>\r\n}\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageFormChat","messages","useSelector","state","chat","status","messagesAnchorRef","useRef","useState","autoScrollIsActive","setAutoScrollIsActive","console","log","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","currentTarget","scrollHeight","scrollTop","clientHeight","Math","abs","map","m","Message","message","id","ref","React","src","photo","alt","userName","setMessage","value","onChange","name","disabled","onClick","sendMessageThunk"],"sourceRoot":""}