{"version":3,"file":"static/js/312.215ba5fe.chunk.js","mappings":"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","sources":["webpack://samurai-way-ts/./src/Components/common/Paginator/Paginator.module.css?c0d0","Components/common/Paginator/Paginator.tsx","Components/Users/User.tsx","redux/users-selectoors.tsx","Components/Users/UsersSearchForm.tsx","Components/Users/Users.tsx","Components/Users/UsersPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__7XGpb\",\"pageNumber\":\"Paginator_pageNumber__OapAN\",\"selectedPage\":\"Paginator_selectedPage__UOXmZ\"};","import s from './Paginator.module.css'\nimport React, {useEffect, useState} from \"react\";\nimport cn from 'classnames'\n\n\ntype PropsPaginator = {\n    totalItemsCount:number\n    pageSize:number\n    currentPage?:number\n    onPageChange?:(pageNumber:number)=>void\n    potionSize?:number\n}\nlet Paginator:React.FC<PropsPaginator> = ({totalItemsCount,pageSize,currentPage=1,onPageChange=()=>{},potionSize=10}:PropsPaginator) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages:Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    useEffect(()=>setPortion(Math.ceil(currentPage/potionSize)), [currentPage]);\n\n    let portionCount = Math.ceil(pagesCount / potionSize)\n    let [portionNumber, setPortion] = useState<number | null>(1)\n    if(portionNumber === null) portionNumber = 1\n    let leftPortionPageNumber = (portionNumber - 1 ) * potionSize + 1\n    let rightPortionPageNumber = portionNumber * potionSize\n    return <div className={cn(s.paginator)}>\n                {portionNumber > 1 &&\n                <button onClick={(e) => {setPortion(portionNumber! - 1)}}>Prev</button> }\n\n                {pages.filter(p =>  p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                    .map((p:any) => {\n                    return <span className={ cn({\n                        [s.selectedPage]: currentPage === p\n                    }, s.pageNumber)}\n                                 key={p}\n                                 onClick={(e) => {\n                                     onPageChange(p)\n                                 }}>{p}</span>\n})}\n    {portionCount > portionNumber &&\n    <button onClick={ () => { setPortion(portionNumber! + 1) }}>Next</button>}\n\n    </div>\n\n}\n\nexport default Paginator;","import s from \"./Users.module.css\";\nimport Vladik from \"./Vladik.png\";\nimport React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../types/types\";\n\n\ntype PropsType = {\n    user:UserType\n        followingInProgress:Array<number>\n        unfollow:(userId:number)=>void\n        follow:(userId:number)=>void\n}\n\nexport const User:React.FC<PropsType> = ({user,followingInProgress,unfollow,follow}) => {\n\nreturn (\n        <div>\n            <span>\n                <div className={s.flex}>\n                <div>\n                    <NavLink to={'/profile/' + user.id }>\n                    <img src={user.photos.small != null  ? user.photos.small : Vladik} className={s.img}  />\n                    </NavLink>\n                </div>\n\n                <div>\n\n                   {user.followed\n                       ? <button disabled={followingInProgress.some((id:any)=>id === user.id)}\n                                 onClick={(e) =>{unfollow(user.id)}}> Unfollow </button>\n                       : <button disabled={followingInProgress.some((id:any)=>id === user.id)}\n                                 onClick={(e) => {follow(user.id)}}> Follow </button>}\n                </div>\n                </div>\n\n            </span>\n            <span>\n                <span>\n                <div>{user.name}</div>\n                    <div>{user.status}</div>\n                </span>\n            </span>\n            {/*<div>{'u.location.country'}</div>*/}\n            {/*<div>{'u.location.city'}</div>*/}\n\n\n        </div>\n\n\n\n     )\n\n\n}\nexport default User;","import {createSelector} from \"reselect\";\nimport {AppStateType} from \"./redux-store\";\n\nexport const getUsersSel = (state:AppStateType) => {\nreturn state.usersPage.users\n}\n\nexport const getUsersSuper = createSelector(getUsersSel,(users, )=>{\n    return users.filter((u:any) => true)\n})\nexport const getPageSize = (state:AppStateType) => {\n    return state.usersPage.pageSize\n}\nexport const getTotalUsersCount = (state:AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\nexport const getCurrentPage = (state:AppStateType) => {\n\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state:AppStateType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state:AppStateType) => {\n    return state.usersPage.followingInProgress\n}\nexport const getUsersFilter = (state:AppStateType) => {\n    return state.usersPage.filter\n}","import {Field, Form, Formik} from \"formik\";\r\n\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reduser\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectoors\";\r\n\r\ntype UsersSearchFormType = {\r\n     onFilterChanged:(filter:FilterType)=>void\r\n }\r\n\r\n const usersSearchValidate = (values:any) => {\r\n     const errors = {}\r\n     return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n     term:string,\r\n    friend: FriendFormType\r\n}\r\nexport const UsersSearchForm:React.FC<UsersSearchFormType> =React.memo((props) => {\r\n\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: {\r\n        setSubmitting: (isSubmitting: boolean) => void\r\n    }) => {\r\n        const filter : FilterType = {\r\n            term:values.term,\r\n            friend:values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n       }\r\n\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term:filter.term,friend:String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Only followed</option>\r\n                    <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik></div>\r\n})","import React, {useEffect} from \"react\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\nimport {FilterType, follow, getUsers, unfollow} from \"../../redux/users-reduser\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersFilter,\n    getUsersSel\n} from \"../../redux/users-selectoors\";\nimport {useHistory} from \"react-router-dom\";\nimport * as queryString from \"querystring\";\n\ntype QueryParamsType = {term?:string; page?:string; friend?:string}\n\n\nexport const Users: React.FC = (props) => {\n    const users = useSelector(getUsersSel)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const search = history.location.search\n        const params = new URLSearchParams(search)\n        const parsedTerm = params.get('term')\n        const parsedPage = params.get('page')\n        const parsedFriend = params.get('friend')\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (parsedPage !== null) {\n            actualPage = Number(parsedPage)\n        }\n        if (parsedTerm !== null) {\n            actualFilter = { ...actualFilter, term: parsedTerm }\n        }\n        switch (parsedFriend) {\n            case 'null':\n                actualFilter = { ...actualFilter, friend: null }\n                break\n            case 'true':\n                actualFilter = { ...actualFilter, friend: true }\n                break\n            case 'false':\n                actualFilter = { ...actualFilter, friend: false }\n                break\n        }\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\n    }, [])\n    useEffect(() => {\n        const query: { term?: string; friend?: string; page?: string } = {}\n\n        if (filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n      if (currentPage !== 1) query.page = String(currentPage)\n\n        const queryToString = new URLSearchParams(query)\n\n        history.push({\n            pathname: '/developers',\n            search: queryToString.toString(),\n        })\n    }, [filter, currentPage])\n\n\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(getUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter:FilterType) => {\n        dispatch(getUsers(1, pageSize, filter))\n    }\n    const followClick = (userId:number) => {\n        dispatch(follow(userId))\n    }\n    const unfollowClick = (userId:number) => {\n        dispatch(unfollow(userId))\n    }\n    return <div>\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n        <Paginator currentPage={currentPage} onPageChange={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}\n        />\n        <div>\n            {\n                users.map((u: any) => <User user={u}\n                                            followingInProgress={followingInProgress}\n                                            key={u.id}\n                                            unfollow={unfollowClick}\n                                            follow={followClick}\n                />)\n            }\n        </div>\n    </div>\n}\n\n\n","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport {Prealoder} from '../common/Prealoder/Preloader';\nimport {getIsFetching,} from \"../../redux/users-selectoors\";\n\n\ntype OwnPropsUserContainerType ={\n   pageTitle:string\n}\n const UsersPage:React.FC<OwnPropsUserContainerType> =\n    (props) => {\n    const isFetching  = useSelector(getIsFetching)\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Prealoder/> : null}\n        <Users/>\n    </>\n}\nexport default UsersPage"],"names":["totalItemsCount","pageSize","currentPage","onPageChange","potionSize","pagesCount","Math","ceil","pages","i","push","useEffect","setPortion","portionCount","useState","portionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","s","onClick","e","filter","p","map","user","followingInProgress","unfollow","follow","to","id","src","photos","small","Vladik","followed","disabled","some","name","status","getUsersSel","state","usersPage","users","getPageSize","createSelector","u","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchValidate","values","UsersSearchForm","React","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","dispatch","useDispatch","history","useHistory","search","location","params","URLSearchParams","parsedTerm","get","parsedPage","parsedFriend","actualPage","actualFilter","Number","getUsers","query","page","queryToString","pathname","toString","followClick","userId","unfollowClick","pageNumber","pageTitle"],"sourceRoot":""}