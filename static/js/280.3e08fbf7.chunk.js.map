{"version":3,"file":"static/js/280.3e08fbf7.chunk.js","mappings":"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","sources":["Components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","webpack://samurai-way-ts/./src/Components/Profile/Profileinfo/Profileinfo.module.css?fa9d","Components/Profile/Profileinfo/ProfileImage.tsx","Components/Profile/Profileinfo/ProfileDataForm.tsx","Components/Profile/Profileinfo/Profileinfo.tsx","webpack://samurai-way-ts/./src/Components/Profile/MyPost/Post/Post.module.css?ba55","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/AddPostForm/AddPostForm.tsx","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/MyPost/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://samurai-way-ts/./src/Components/Profile/MyPost/MyPosts.module.css?88cb"],"sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\n\n\n\ntype PropsType ={\nstatus:string\n    updateStatus:(status:string) => void\n}\nconst ProfileStatusWithHooks:React.FC<PropsType> = (props) =>\n{\n\n        let [editMode,setEditMode] = useState(false)\n    let [status,setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n   let deactivateEditMode =()=>{\n       setEditMode(\n           false\n       )\n       props.updateStatus(status)\n   }\n  const activateMode = () => {\n      setEditMode(\n          true\n      )\n\n  }\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) =>{\n\n        setStatus(e.currentTarget.value)\n    }\n    return(\n    <div>\n\n        { !editMode &&\n            <div>\n              <b>Status:</b>  <span onDoubleClick={activateMode} >{props.status || 'No Status'}</span>\n            </div>}\n        {editMode &&\n            <div>\n                <input onChange={onStatusChange}\n                    onBlur={deactivateEditMode}\n                       autoFocus={true}\n                       />\n            </div>}\n    </div>)\n}\n\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"imgone\":\"Profileinfo_imgone__vQr-J\",\"imgtwo\":\"Profileinfo_imgtwo__K3irn\",\"item\":\"Profileinfo_item__7r+3m\",\"focus\":\"Profileinfo_focus__5M03k\",\"imgthree\":\"Profileinfo_imgthree__hzhS7\",\"contact\":\"Profileinfo_contact__Rk8e5\"};","import s from \"./Profileinfo.module.css\";\nimport React from \"react\";\nexport const ImageProfile =() => {\n  return (\n      <>\n          <div className={s.imgone}>\n              <a href=\"src/Components/Profile\">\n                  <img\n                      className={s.imgtwo}\n                      src=\"https://images.all-free-download.com/images/graphicwebp/btc_sign_icon_flat_silhouette_sketch_6921320.webp\"/>\n              </a>\n              <a href=\"src/Components/Profile\">\n                  <img\n                      className={s.imgtwo}\n                      src=\"https://images.all-free-download.com/images/graphicwebp/ethereum_currency_sign_icon_flat_silhouette_outline_6921322.webp\"/>\n              </a>\n              <a href=\"src/Components/Profile\">\n                  <img\n                      className={s.imgtwo}\n                      src=\"https://images.all-free-download.com/images/graphicwebp/lira_sign_icon_black_flat_silhouette_sketch_6921286.webp\"/>\n              </a>\n              <a href=\"src/Components/Profile\">\n                  <img\n                      className={s.imgtwo}\n                      src=\"https://images.all-free-download.com/images/graphicwebp/tenge_currency_sign_flat_black_white_sketch_6921348.webp\"/>\n              </a>\n          </div>\n\n      </>\n)\n        }","import React from \"react\";\nimport {createField, } from \"../../../Login/LoginPage\";\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./Profileinfo.module.css\";\nimport {ProfileType} from \"../../../types/types\";\n\ntype PropsDataFormType = {\n    error:string\n    profile:ProfileType\n    isOwner:boolean\n    handleSubmit:()=>void\n}\ntype PropsType = {\n    profile:ProfileType\n    isOwner:boolean\n}\ntype PropsDataFormTypeKeys = Extract<keyof ProfileType, string>\nconst DataForm:React.FC<InjectedFormProps<PropsDataFormType,PropsType>&PropsType> = ({error,profile,isOwner,handleSubmit}) => {\n\n\n\n    return <form onSubmit={handleSubmit}>\n        {error && <div className={s.error}>\n            {error} </div>}\n        {!isOwner &&\n            <div><button >Save</button></div>}\n\n        <div>\n            <b>Full name</b> : {createField<PropsDataFormTypeKeys>(null,\"FullName\",\"fullName\",[],Input )}\n        </div>\n        <div>\n            <b>Looking for a job</b> :  {createField<PropsDataFormTypeKeys>(null,\"FullName\",\"lookingForAJob\",[],Input, {type:'checkbox'},)}\n        </div>\n\n            <div>\n                <b>My professional skills</b> :   {createField<PropsDataFormTypeKeys>(null,\"My professional skills\",\"lookingForAJobDescription\",[],Textarea, )}\n            </div>\n        <div>\n            <b> About me </b>:  {createField(null,\"About me\",\"aboutMe\",[],Textarea, )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map((key:any)=>{\n            return  <div key={key} className={s.contact}>\n                <b>\n                    {key}: {createField(null,key,\"contacts.\" + key,[],Input )}\n                </b>\n\n            </div>\n        })\n\n        }\n        </div>\n        <div>\n\n        )\n\n\n        </div>\n    </form>\n}\nconst  ProfileDataForm:any = reduxForm<PropsDataFormType,PropsType>({form:'edit-profile'})(DataForm)\nexport default ProfileDataForm","import React, {ChangeEvent, useState} from 'react';\r\nimport {Prealoder} from \"../../common/Prealoder/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ImageProfile} from \"./ProfileImage\";\r\nimport s from './Profileinfo.module.css'\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n\r\n}\r\nconst Profileinfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile,}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <div><Prealoder/></div>\r\n    }\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            if (e.target.files.length) {\r\n                savePhoto(e.target.files[0])\r\n            }\r\n        } else {\r\n            alert('Error,files null')\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <ImageProfile/>\r\n\r\n                <img src={profile.photos.small}/>\r\n                {<div>\r\n                    !isOwner &&\r\n                    <input type={\"file\"} onChange={mainPhotoSelected}/>\r\n                </div>\r\n\r\n                }\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n\r\n                {<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>}\r\n            </div>\r\n        </>)\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\ntype PropsDataFormTypeKeys = Extract<keyof ProfileDataType, string>\r\nconst DataProfile:React.FC<ProfileDataType> =\r\n    ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b> : {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b> : {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b> : {profile.lookingForAJobDescription}\r\n            </div>}\r\n        <div>\r\n            <b>\r\n                About me\r\n            </b>: {profile.aboutMe}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts</b>:\r\n            {Object\r\n                .keys(profile.contacts)\r\n                .map((key: any) => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>\r\n                            <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType ] }/>\r\n                        </b>\r\n\r\n                    </div>\r\n                })\r\n\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst ProfileData: any = reduxForm<PropsDataFormTypeKeys,ProfileDataType>({form: 'edit-profile'})(DataProfile)\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle:string\r\n    contactValue:string\r\n}\r\nconst Contact:React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}:</b>{contactValue}\r\n    </div>\r\n}\r\nexport default Profileinfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__LRLqk\"};","import s from \"./Post.module.css\";\r\nimport React from \"react\";\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    message:PostType\r\n    likesCount:number\r\n    id:number\r\n}\r\nconst Post:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src=\"https://images.all-free-download.com/images/graphicwebp/user_astronaut_sign_icon_flat_contrast_black_white_sketch_6923675.webp\"\r\n                    alt=\"\"\r\n                />\r\n                {props.message}\r\n            </div>\r\n            <span>like</span>{props.likesCount}\r\n        </div>\r\n    );\r\n};\r\nexport default Post;\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../MyPosts.module.css\";\r\nimport {Input} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {createField} from \"../../../../Login/LoginPage\";\r\n\r\n\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText:string\r\n}\r\ntype AddPostFormValuesTypeKeys =Extract<keyof AddPostFormValuesType, string>\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddPost:React.FC<InjectedFormProps<AddPostFormValuesType,PropsType>&PropsType>= (props:any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(s.text, 'email', 'newPostText', [required], Input)}\r\n\r\n            </div>\r\n            <div>\r\n            <button  className={s.button}>Add post</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport  default  reduxForm<AddPostFormValuesType,PropsType >({form:\"addPost\"})(AddPost)","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts:Array<PostType>\r\n\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\n\r\nconst  MyPosts:React.FC<MapPropsType & DispatchPropsType > = React.memo((props) => {\r\n\r\n    let posts = props.posts\r\n\r\n    let postElements =\r\n        [...posts]\r\n            .reverse()\r\n            .map((p: any) => (<Post\r\n                    key={p.id}\r\n                id={p.id}\r\n                message={p.message}\r\n                likesCount={p.likesCount}/>\r\n        ))\r\n\r\n    let addNewMessage = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return <div>\r\n\r\n        <div className={s.content}>\r\n            <div className={s.my}>My Posts</div>\r\n            <div>\r\n                <AddPostForm onSubmit={addNewMessage}/>\r\n            </div>\r\n            <div className={s.new}>New Post</div>\r\n\r\n            <div className={s.posts}>\r\n                {postElements}\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n})\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\nexport default MyPostsMemorized;\r\n","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    } as MapPropsType\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType,DispatchPropsType,{},AppStateType>(mapStateToProps,\r\n    {addPost:actions.addPostCreator}) (MyPosts);\r\nexport default MyPostsContainer;","import Profileinfo from \"./Profileinfo/Profileinfo\";\r\nimport MyPostsContainer from \"./MyPost/MyPostsContainer\";\r\nimport * as React from \"react\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Profileinfo savePhoto={props.savePhoto} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} isOwner={props.isOwner}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n\r\n            <MyPostsContainer   />\r\n        </div>\r\n    );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateStatus,} from \"../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {ProfileType} from \"../../types/types\";\n\n\ntype MapStateType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile:(userId:number)=>void\n    getUserStatus:(userId:number)=>void\n    updateStatus:(status:string)=> void\n    saveProfile:(profile: ProfileType)=> Promise<any>\n    savePhoto:(file: File) => void\n\n}\n\ntype PathParamsType =  {\n    userId:string\n}\ntype PropsType = DispatchPropsType & MapStateType & RouteComponentProps<PathParamsType>\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId:number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId\n        }\n        if (!userId) {\n             this.props.history.push('/login')\n        }\n        if(!userId){\n            throw new Error('ID should exists in URI params or in state ')\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getUserStatus(userId)\n        }\n    }\n    componentDidMount() {\nthis.refreshProfile()\n    }\n    componentDidUpdate(prevProps:PropsType, prevState: PropsType) {\n        if(this.props.match.params.userId != prevProps.match.params.userId )\n        this.refreshProfile()\n\n    }\n\n    render() {\n        return (<div>\n                <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                         profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}\n                         saveProfile={this.props.saveProfile}\n                savePhoto={this.props.savePhoto}\n                />\n            </div>\n        )\n    };\n}\n\n\n\n\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\nstatus:state.profilePage.status,\n    authorizedUserId:state.auth.userId,\n    isAuth:state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile,getUserStatus,updateStatus,savePhoto,saveProfile}),\n    withRouter,\n\n)\n(ProfileContainer);","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__L8P+U\",\"posts\":\"MyPosts_posts__ZMEY-\",\"item\":\"MyPosts_item__OMpqB\",\"my\":\"MyPosts_my__+ugjg\",\"new\":\"MyPosts_new__EcoxC\",\"button\":\"MyPosts_button__-sBtj\",\"text\":\"MyPosts_text__ADDDf\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ImageProfile","className","s","href","src","reduxForm","form","error","profile","isOwner","handleSubmit","onSubmit","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","photos","small","target","files","length","alert","initialValues","formData","then","alt","message","likesCount","maxLengthCreator","required","MyPosts","React","posts","postElements","reverse","p","id","AddPostForm","values","addPost","newPostText","connect","state","profilePage","actions","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","Error","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter"],"sourceRoot":""}