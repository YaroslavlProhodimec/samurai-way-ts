{"version":3,"file":"static/js/408.53f53d86.chunk.js","mappings":"kKACA,OAAgB,QAAU,yBAAyB,QAAU,yBAAyB,KAAO,sBAAsB,MAAQ,uBAAuB,KAAO,sBAAsB,WAAa,4BAA4B,KAAO,sBAAsB,OAAS,yB,6BC6B9P,EArBwC,SAAC,GAAgB,IAAfA,EAAc,EAAdA,GAAGC,EAAW,EAAXA,KAErCC,EAAO,YAAcF,EACzB,OAAW,gBAAKG,UAAWC,EAAAA,KAAQ,IAAKA,EAAAA,OAA7B,UACP,UAAC,KAAD,CAASC,GAAIH,EAAMI,gBAAiBF,EAAAA,WAApC,cAAoDH,GAChD,gBAAKE,UAAWC,EAAAA,QAAhB,UACI,gBAAKD,UAAWC,EAAAA,KAAhB,UACI,gBACIG,IAAI,gIACJC,IAAI,eCJ5B,EANqC,SAACC,GACnC,OAAO,gBAAKN,UAAWC,EAAAA,QAAhB,SAA4BK,EAAMC,W,gDCFtCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgBrC,GAAgBC,EAAAA,EAAAA,GAA8C,CAACC,KAAK,WAApE,EAbiG,SAACL,GAC9F,OAEI,kBAAMM,SAAUN,EAAMO,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAAqCb,EAAAA,EAAAA,KAAQ,qBAAsB,oBAAqB,CAACc,EAAAA,EAAUP,GAAaQ,EAAAA,OAGrH,mBAAShB,UAAWC,EAAAA,EAAAA,OAApB,wB,6BCyCZ,EA5C2B,WAEzB,IAAMgB,GAASC,EAAAA,EAAAA,KAAY,SAACD,GAAD,OAAwBA,EAAME,eACnDC,GAAUF,EAAAA,EAAAA,KAAY,SAACD,GAAD,OAAwBA,EAAMI,KAAKD,UAC3DE,GAAWC,EAAAA,EAAAA,MAIVC,EAAiBP,EAAMQ,QAAQC,KAAI,SAACC,GAAD,OAAiB,SAAC,EAAD,CAAc9B,GAAI8B,EAAO9B,GAAIC,KAAM6B,EAAO7B,UAC7F8B,EAAkBX,EAAMY,SAASH,KAAI,SAACI,GAAD,OAAY,SAAC,EAAD,CAASvB,QAASuB,EAAEvB,aAMzE,OAAKa,GAID,iBAAKpB,UAAWC,EAAAA,QAAhB,WAEI,gBAAKD,UAAWC,EAAAA,MAAhB,UAEI,gBAAKD,UAAWC,EAAAA,KAAhB,SACKuB,OAKT,gBAAKxB,UAAWC,EAAAA,KAAhB,UACI,SAAC,EAAD,CAAgBW,SAnBJ,SAACmB,GACjBT,EAASU,EAAAA,EAAAA,YAAoBD,EAAOE,0BAoBpC,gBAAKjC,UAAWC,EAAAA,QAAhB,SACK2B,QAjBA,SAAC,KAAD,CAAU1B,GAAI,a,mBC9B/B,KAAgB,QAAU,yBAAyB,MAAQ,uBAAuB,KAAO,sBAAsB,GAAK,oBAAoB,IAAM,qBAAqB,OAAS,wBAAwB,KAAO","sources":["webpack://samurai-way-ts/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/addMessageForm/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","webpack://samurai-way-ts/./src/Components/Profile/MyPost/MyPosts.module.css?88cb"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Dialogs_wrapper__jEFhM\",\"message\":\"Dialogs_message__wzGvA\",\"item\":\"Dialogs_item__Ky2rR\",\"items\":\"Dialogs_items__FQhZf\",\"flex\":\"Dialogs_flex__nsUz+\",\"activeLink\":\"Dialogs_activeLink__5mE5x\",\"text\":\"Dialogs_text__Ubm6X\",\"button\":\"Dialogs_button__c3xR+\"};","import {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\"\r\nimport s from \".././Dialogs.module.css\";\r\n\r\n\r\ntype PropsType = {\r\n    id:string\r\n    name:string\r\n}\r\nconst DialogsItem:React.FC<PropsType> = ({id,name})  => {\r\n    debugger\r\n    let path = '/dialogs/' + id;\r\n    return     <div className={s.item+ ' '+ s.active}>\r\n        <NavLink to={path} activeClassName={s.activeLink}> {name}\r\n            <div className={s.content}>\r\n                <div className={s.item}>\r\n                    <img\r\n                        src=\"https://images.all-free-download.com/images/graphicwebp/user_alt_1_sign_icon_silhouette_geometric_rounded_shapes_6923673.webp\"\r\n                        alt=\"\"\r\n                    />\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogsItem;\r\n","import s from \".././Dialogs.module.css\"\r\nimport * as React from \"react\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n   message:string\r\n}\r\nconst  Message:React.FC<PropsType> = (props) => {\r\n   return <div className={s.message}>{props.message}\r\n\r\n   </div>\r\n}\r\n\r\nexport default Message;\r\n\r\n","import { InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../../Profile/MyPost/MyPosts.module.css\";\r\nimport { Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {createField} from \"../../../Login/LoginPage\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\nconst maxLength50 = maxLengthCreator(50)\r\ntype NewMessageFormTypeKeys = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormValuesType,PropsType>&PropsType> = (props:any) => {\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormTypeKeys >(s.text, 'Enter your message', 'updateNewPostText', [required, maxLength50],Textarea)}\r\n\r\n            </div>\r\n            <button  className={s.button}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default  reduxForm<NewMessageFormValuesType,PropsType>({form:\"addPost\"})(AddMessageForm)","import s from \"./Dialogs.module.css\"\r\nimport * as React from \"react\"\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./addMessageForm/AddMessageForm\";\r\nimport {actions} from \"../../redux/dialogs-reduser\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type NewMessageFormValuesType = {\r\n    updateNewPostText: string\r\n\r\n}\r\n const Dialogs : React.FC =()  => {\r\n\r\n  const state =  useSelector((state:AppStateType) => state.dialogsPage)\r\n  const isAuth =  useSelector((state:AppStateType) => state.auth.isAuth)\r\nconst dispatch = useDispatch()\r\n\r\n\r\n\r\n   let dialogsElement = state.dialogs.map((dialog: any) => <DialogsItem  id={dialog.id} name={dialog.name}  />)\r\n    let messagesElement = state.messages.map((m: any) => <Message message={m.message}  />)\r\n\r\n        let addNewMessage = (values: NewMessageFormValuesType) => {\r\n            dispatch(actions.sendMessage(values.updateNewPostText))\r\n\r\n        }\r\n    if (!isAuth )\r\n        return   <Redirect to={\"/login\"} />\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n\r\n            <div className={s.items}>\r\n\r\n                <div className={s.item}>\r\n                    {dialogsElement}\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className={s.flex}>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n            <div className={s.message}>\r\n                {messagesElement}\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialogs;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__L8P+U\",\"posts\":\"MyPosts_posts__ZMEY-\",\"item\":\"MyPosts_item__OMpqB\",\"my\":\"MyPosts_my__+ugjg\",\"new\":\"MyPosts_new__EcoxC\",\"button\":\"MyPosts_button__-sBtj\",\"text\":\"MyPosts_text__ADDDf\"};"],"names":["id","name","path","className","s","to","activeClassName","src","alt","props","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","state","useSelector","dialogsPage","isAuth","auth","dispatch","useDispatch","dialogsElement","dialogs","map","dialog","messagesElement","messages","m","values","actions","updateNewPostText"],"sourceRoot":""}